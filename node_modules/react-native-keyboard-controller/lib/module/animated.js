import React, { useMemo, useRef } from 'react';
import { Animated, Platform, StyleSheet } from 'react-native';
import Reanimated, { useSharedValue } from 'react-native-reanimated';
import { KeyboardContext } from './context';
import { useAnimatedKeyboardHandler, useSharedHandlers } from './internal';
import { KeyboardControllerView } from './native';
const KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(Animated.createAnimatedComponent(KeyboardControllerView));
export const styles = StyleSheet.create({
  container: {
    flex: 1
  },
  hidden: {
    display: 'none',
    position: 'absolute'
  }
});
export const KeyboardProvider = _ref => {
  let {
    children,
    statusBarTranslucent
  } = _ref;
  // animated values
  const progress = useRef(new Animated.Value(0)).current;
  const height = useRef(new Animated.Value(0)).current; // shared values

  const progressSV = useSharedValue(0);
  const heightSV = useSharedValue(0);
  const {
    setHandlers,
    broadcast
  } = useSharedHandlers(); // memo

  const context = useMemo(() => ({
    animated: {
      progress: progress,
      height: Animated.multiply(height, -1)
    },
    reanimated: {
      progress: progressSV,
      height: heightSV
    },
    setHandlers
  }), []);
  const style = useMemo(() => [styles.hidden, {
    transform: [{
      translateX: height
    }, {
      translateY: progress
    }]
  }], []);
  const onKeyboardMove = useMemo(() => Animated.event([{
    nativeEvent: {
      progress,
      height
    }
  }], {
    useNativeDriver: true
  }), []); // handlers

  const updateSharedValues = (event, platforms) => {
    'worklet';

    if (platforms.includes(Platform.OS)) {
      progressSV.value = event.progress;
      heightSV.value = -event.height;
    }
  };

  const handler = useAnimatedKeyboardHandler({
    onKeyboardMoveStart: event => {
      'worklet';

      broadcast('onStart', event);
      updateSharedValues(event, ['ios']);
    },
    onKeyboardMove: event => {
      'worklet';

      broadcast('onMove', event);
      updateSharedValues(event, ['android']);
    },
    onKeyboardMoveEnd: event => {
      'worklet';

      broadcast('onEnd', event);
    }
  }, []);
  return /*#__PURE__*/React.createElement(KeyboardContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(KeyboardControllerViewAnimated, {
    onKeyboardMoveReanimated: handler,
    onKeyboardMoveStart: Platform.OS === 'ios' ? onKeyboardMove : undefined,
    onKeyboardMove: Platform.OS === 'android' ? onKeyboardMove : undefined,
    statusBarTranslucent: statusBarTranslucent,
    style: styles.container
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Animated.View, {
    // we are using this small hack, because if the component (where
    // animated value has been used) is unmounted, then animation will
    // stop receiving events (seems like it's react-native optimization).
    // So we need to keep a reference to the animated value, to keep it's
    // always mounted (keep a reference to an animated value).
    //
    // To test why it's needed, try to open screen which consumes Animated.Value
    // then close it and open it again (for example 'Animated transition').
    style: style
  }), children)));
};
//# sourceMappingURL=animated.js.map