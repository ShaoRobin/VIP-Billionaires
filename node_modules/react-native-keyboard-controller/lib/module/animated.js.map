{"version":3,"names":["React","useMemo","useRef","Animated","Platform","StyleSheet","Reanimated","useSharedValue","KeyboardContext","useAnimatedKeyboardHandler","useSharedHandlers","KeyboardControllerView","KeyboardControllerViewAnimated","createAnimatedComponent","styles","create","container","flex","hidden","display","position","KeyboardProvider","children","statusBarTranslucent","progress","Value","current","height","progressSV","heightSV","setHandlers","broadcast","context","animated","multiply","reanimated","style","transform","translateX","translateY","onKeyboardMove","event","nativeEvent","useNativeDriver","updateSharedValues","platforms","includes","OS","value","handler","onKeyboardMoveStart","onKeyboardMoveEnd","undefined"],"sources":["animated.tsx"],"sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Animated, Platform, StyleSheet, ViewStyle } from 'react-native';\nimport Reanimated, { useSharedValue } from 'react-native-reanimated';\n\nimport { KeyboardContext } from './context';\nimport { useAnimatedKeyboardHandler, useSharedHandlers } from './internal';\nimport { KeyboardControllerView } from './native';\n\nimport type {\n  KeyboardControllerProps,\n  KeyboardHandler,\n  NativeEvent,\n} from './types';\n\nconst KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(\n  Animated.createAnimatedComponent(\n    KeyboardControllerView\n  ) as React.FC<KeyboardControllerProps>\n);\n\ntype Styles = {\n  container: ViewStyle;\n  hidden: ViewStyle;\n};\n\nexport const styles = StyleSheet.create<Styles>({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    display: 'none',\n    position: 'absolute',\n  },\n});\n\ntype KeyboardProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Set the value to `true`, if you use translucent status bar on Android.\n   * If you already control status bar translucency via `react-native-screens`\n   * or `StatusBar` component from `react-native`, you can ignore it.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/14\n   * @platform android\n   */\n  statusBarTranslucent?: boolean;\n};\n\nexport const KeyboardProvider = ({\n  children,\n  statusBarTranslucent,\n}: KeyboardProviderProps) => {\n  // animated values\n  const progress = useRef(new Animated.Value(0)).current;\n  const height = useRef(new Animated.Value(0)).current;\n  // shared values\n  const progressSV = useSharedValue(0);\n  const heightSV = useSharedValue(0);\n  const { setHandlers, broadcast } = useSharedHandlers<KeyboardHandler>();\n  // memo\n  const context = useMemo(\n    () => ({\n      animated: { progress: progress, height: Animated.multiply(height, -1) },\n      reanimated: { progress: progressSV, height: heightSV },\n      setHandlers,\n    }),\n    []\n  );\n  const style = useMemo(\n    () => [\n      styles.hidden,\n      { transform: [{ translateX: height }, { translateY: progress }] },\n    ],\n    []\n  );\n  const onKeyboardMove = useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              progress,\n              height,\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    []\n  );\n  // handlers\n  const updateSharedValues = (event: NativeEvent, platforms: string[]) => {\n    'worklet';\n\n    if (platforms.includes(Platform.OS)) {\n      progressSV.value = event.progress;\n      heightSV.value = -event.height;\n    }\n  };\n  const handler = useAnimatedKeyboardHandler(\n    {\n      onKeyboardMoveStart: (event: NativeEvent) => {\n        'worklet';\n\n        broadcast('onStart', event);\n        updateSharedValues(event, ['ios']);\n      },\n      onKeyboardMove: (event: NativeEvent) => {\n        'worklet';\n\n        broadcast('onMove', event);\n        updateSharedValues(event, ['android']);\n      },\n      onKeyboardMoveEnd: (event: NativeEvent) => {\n        'worklet';\n\n        broadcast('onEnd', event);\n      },\n    },\n    []\n  );\n\n  return (\n    <KeyboardContext.Provider value={context}>\n      <KeyboardControllerViewAnimated\n        onKeyboardMoveReanimated={handler}\n        onKeyboardMoveStart={Platform.OS === 'ios' ? onKeyboardMove : undefined}\n        onKeyboardMove={Platform.OS === 'android' ? onKeyboardMove : undefined}\n        statusBarTranslucent={statusBarTranslucent}\n        style={styles.container}\n      >\n        <>\n          <Animated.View\n            // we are using this small hack, because if the component (where\n            // animated value has been used) is unmounted, then animation will\n            // stop receiving events (seems like it's react-native optimization).\n            // So we need to keep a reference to the animated value, to keep it's\n            // always mounted (keep a reference to an animated value).\n            //\n            // To test why it's needed, try to open screen which consumes Animated.Value\n            // then close it and open it again (for example 'Animated transition').\n            style={style}\n          />\n          {children}\n        </>\n      </KeyboardControllerViewAnimated>\n    </KeyboardContext.Provider>\n  );\n};\n"],"mappings":"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"}