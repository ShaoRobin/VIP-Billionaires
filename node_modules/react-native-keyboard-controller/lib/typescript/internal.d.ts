import type { EventWithName, Handlers, NativeEvent } from './types';
export declare function useAnimatedKeyboardHandler<TContext extends Record<string, unknown>>(handlers: {
    onKeyboardMoveStart?: (e: NativeEvent, context: TContext) => void;
    onKeyboardMove?: (e: NativeEvent, context: TContext) => void;
    onKeyboardMoveEnd?: (e: NativeEvent, context: TContext) => void;
}, dependencies?: ReadonlyArray<unknown>): (e: import("react-native").NativeSyntheticEvent<EventWithName<NativeEvent>>) => void;
/**
 * Hook for storing worklet handlers (objects with keys, where values are worklets).
 * Returns methods for setting handlers and broadcasting events in them.
 *
 * T is a generic that looks like:
 * @example
 * {
 *  onEvent: () => {},
 *  onEvent2: () => {},
 * }
 */
export declare function useSharedHandlers<T extends Record<string, Function>>(): {
    setHandlers: (handler: Handlers<T>) => void;
    broadcast: (type: keyof T, event: NativeEvent) => void;
};
