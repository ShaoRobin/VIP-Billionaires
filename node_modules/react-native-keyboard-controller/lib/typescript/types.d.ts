import type { NativeSyntheticEvent, ViewProps } from 'react-native';
export declare type NativeEvent = {
    progress: number;
    height: number;
};
export declare type EventWithName<T> = {
    eventName: string;
} & T;
export declare type KeyboardControllerProps = {
    onKeyboardMoveStart?: (e: NativeSyntheticEvent<EventWithName<NativeEvent>>) => void;
    onKeyboardMove?: (e: NativeSyntheticEvent<EventWithName<NativeEvent>>) => void;
    onKeyboardMoveEnd?: (e: NativeSyntheticEvent<EventWithName<NativeEvent>>) => void;
    onKeyboardMoveReanimated: (e: NativeSyntheticEvent<EventWithName<NativeEvent>>) => void;
    statusBarTranslucent?: boolean;
} & ViewProps;
export declare type KeyboardControllerModule = {
    setDefaultMode: () => void;
    setInputMode: (mode: number) => void;
    addListener: (eventName: string) => void;
    removeListeners: (count: number) => void;
};
export declare type KeyboardControllerEvents = 'keyboardWillShow' | 'keyboardDidShow' | 'keyboardWillHide' | 'keyboardDidHide';
export declare type KeyboardEventData = {
    height: number;
};
export declare type Handlers<T> = Record<string, T | undefined>;
export declare type KeyboardHandler = {
    onStart?: (e: NativeEvent) => void;
    onMove?: (e: NativeEvent) => void;
    onEnd?: (e: NativeEvent) => void;
};
export declare type KeyboardHandlers = Handlers<KeyboardHandler>;
