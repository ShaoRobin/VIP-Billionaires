{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { NativeSyntheticEvent, ViewProps } from 'react-native';\n\n// DirectEventHandler events declaration\n\nexport type NativeEvent = {\n  progress: number;\n  height: number;\n};\nexport type EventWithName<T> = {\n  eventName: string;\n} & T;\n\n// native View/Module declarations\n\nexport type KeyboardControllerProps = {\n  onKeyboardMoveStart?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>\n  ) => void;\n  onKeyboardMove?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>\n  ) => void;\n  onKeyboardMoveEnd?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>\n  ) => void;\n  // fake prop used to activate reanimated bindings\n  onKeyboardMoveReanimated: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>\n  ) => void;\n  statusBarTranslucent?: boolean;\n} & ViewProps;\n\nexport type KeyboardControllerModule = {\n  // android only\n  setDefaultMode: () => void;\n  setInputMode: (mode: number) => void;\n  // native event module stuff\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// Event module declarations\n\nexport type KeyboardControllerEvents =\n  | 'keyboardWillShow'\n  | 'keyboardDidShow'\n  | 'keyboardWillHide'\n  | 'keyboardDidHide';\nexport type KeyboardEventData = {\n  height: number;\n};\n\n// package types\n\nexport type Handlers<T> = Record<string, T | undefined>;\nexport type KeyboardHandler = {\n  onStart?: (e: NativeEvent) => void;\n  onMove?: (e: NativeEvent) => void;\n  onEnd?: (e: NativeEvent) => void;\n};\nexport type KeyboardHandlers = Handlers<KeyboardHandler>;\n"],"mappings":""}