"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGenericKeyboardHandler = useGenericKeyboardHandler;
exports.useKeyboardAnimation = void 0;
exports.useKeyboardHandler = useKeyboardHandler;
exports.useResizeMode = exports.useReanimatedKeyboardAnimation = void 0;

var _react = require("react");

var _context = require("./context");

var _native = require("./native");

var _utils = require("./utils");

const useResizeMode = () => {
  (0, _react.useEffect)(() => {
    _native.KeyboardController.setInputMode(_native.AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);

    return () => _native.KeyboardController.setDefaultMode();
  }, []);
};

exports.useResizeMode = useResizeMode;

const useKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _react.useContext)(_context.KeyboardContext);
  return context.animated;
};

exports.useKeyboardAnimation = useKeyboardAnimation;

const useReanimatedKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _react.useContext)(_context.KeyboardContext);
  return context.reanimated;
};

exports.useReanimatedKeyboardAnimation = useReanimatedKeyboardAnimation;

function useGenericKeyboardHandler(handler, deps) {
  const context = (0, _react.useContext)(_context.KeyboardContext);
  (0, _react.useEffect)(() => {
    const key = (0, _utils.uuid)();
    context.setHandlers({
      [key]: handler
    });
    return () => {
      context.setHandlers({
        [key]: undefined
      });
    };
  }, deps);
}

function useKeyboardHandler(handler, deps) {
  useResizeMode();
  useGenericKeyboardHandler(handler, deps);
}
//# sourceMappingURL=hooks.js.map