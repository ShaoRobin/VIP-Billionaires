{"version":3,"names":["useAnimatedKeyboardHandler","handlers","dependencies","context","doDependenciesDiffer","useHandler","useEvent","event","onKeyboardMoveStart","onKeyboardMove","onKeyboardMoveEnd","eventName","endsWith","useSharedHandlers","useSharedValue","jsHandlers","useRef","updateSharedHandlers","value","current","setHandlers","useCallback","handler","broadcast","type","Object","keys","forEach","key"],"sources":["internal.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport { useEvent, useHandler, useSharedValue } from 'react-native-reanimated';\n\nimport type { EventWithName, Handlers, NativeEvent } from './types';\n\nexport function useAnimatedKeyboardHandler<\n  TContext extends Record<string, unknown>\n>(\n  handlers: {\n    onKeyboardMoveStart?: (e: NativeEvent, context: TContext) => void;\n    onKeyboardMove?: (e: NativeEvent, context: TContext) => void;\n    onKeyboardMoveEnd?: (e: NativeEvent, context: TContext) => void;\n  },\n  dependencies?: ReadonlyArray<unknown>\n) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event: EventWithName<NativeEvent>) => {\n      'worklet';\n      const { onKeyboardMoveStart, onKeyboardMove, onKeyboardMoveEnd } =\n        handlers;\n\n      if (\n        onKeyboardMoveStart &&\n        event.eventName.endsWith('onKeyboardMoveStart')\n      ) {\n        onKeyboardMoveStart(event, context);\n      }\n\n      if (onKeyboardMove && event.eventName.endsWith('onKeyboardMove')) {\n        onKeyboardMove(event, context);\n      }\n\n      if (onKeyboardMoveEnd && event.eventName.endsWith('onKeyboardMoveEnd')) {\n        onKeyboardMoveEnd(event, context);\n      }\n    },\n    ['onKeyboardMoveStart', 'onKeyboardMove', 'onKeyboardMoveEnd'],\n    doDependenciesDiffer\n  );\n}\n\n/**\n * Hook for storing worklet handlers (objects with keys, where values are worklets).\n * Returns methods for setting handlers and broadcasting events in them.\n *\n * T is a generic that looks like:\n * @example\n * {\n *  onEvent: () => {},\n *  onEvent2: () => {},\n * }\n */\nexport function useSharedHandlers<T extends Record<string, Function>>() {\n  const handlers = useSharedValue<Handlers<T>>({});\n  const jsHandlers = useRef<Handlers<T>>({});\n\n  // since js -> worklet -> js call is asynchronous, we can not write handlers\n  // straight into shared variable (using current shared value as a previous result),\n  // since there may be a race condition in a call, and closure may have out-of-dated\n  // values. As a result, some of handlers may be not written to \"all handlers\" object.\n  // Below we are writing all handlers to `ref` and afterwards synchronize them with\n  // shared value (since `refs` are not referring to actual value in worklets).\n  // This approach allow us to update synchronously handlers in js thread (and it assures,\n  // that it will have all of them) and then update them in worklet thread (calls are\n  // happening in FIFO order, so we will always have actual value).\n  const updateSharedHandlers = () => {\n    handlers.value = jsHandlers.current;\n  };\n  const setHandlers = useCallback((handler: Handlers<T>) => {\n    jsHandlers.current = {\n      ...jsHandlers.current,\n      ...handler,\n    };\n    updateSharedHandlers();\n  }, []);\n  const broadcast = (type: keyof T, event: NativeEvent) => {\n    'worklet';\n\n    Object.keys(handlers.value).forEach((key) =>\n      handlers.value[key]?.[type]?.(event)\n    );\n  };\n\n  return { setHandlers, broadcast };\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;AAIO,SAASA,0BAAT,CAGLC,QAHK,EAQLC,YARK,EASL;EACA,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAoC,IAAAC,iCAAA,EAAWJ,QAAX,EAAqBC,YAArB,CAA1C;EAEA,OAAO,IAAAI,+BAAA,EACJC,KAAD,IAAuC;IACrC;;IACA,MAAM;MAAEC,mBAAF;MAAuBC,cAAvB;MAAuCC;IAAvC,IACJT,QADF;;IAGA,IACEO,mBAAmB,IACnBD,KAAK,CAACI,SAAN,CAAgBC,QAAhB,CAAyB,qBAAzB,CAFF,EAGE;MACAJ,mBAAmB,CAACD,KAAD,EAAQJ,OAAR,CAAnB;IACD;;IAED,IAAIM,cAAc,IAAIF,KAAK,CAACI,SAAN,CAAgBC,QAAhB,CAAyB,gBAAzB,CAAtB,EAAkE;MAChEH,cAAc,CAACF,KAAD,EAAQJ,OAAR,CAAd;IACD;;IAED,IAAIO,iBAAiB,IAAIH,KAAK,CAACI,SAAN,CAAgBC,QAAhB,CAAyB,mBAAzB,CAAzB,EAAwE;MACtEF,iBAAiB,CAACH,KAAD,EAAQJ,OAAR,CAAjB;IACD;EACF,CApBI,EAqBL,CAAC,qBAAD,EAAwB,gBAAxB,EAA0C,mBAA1C,CArBK,EAsBLC,oBAtBK,CAAP;AAwBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASS,iBAAT,GAAiE;EACtE,MAAMZ,QAAQ,GAAG,IAAAa,qCAAA,EAA4B,EAA5B,CAAjB;EACA,MAAMC,UAAU,GAAG,IAAAC,aAAA,EAAoB,EAApB,CAAnB,CAFsE,CAItE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMC,oBAAoB,GAAG,MAAM;IACjChB,QAAQ,CAACiB,KAAT,GAAiBH,UAAU,CAACI,OAA5B;EACD,CAFD;;EAGA,MAAMC,WAAW,GAAG,IAAAC,kBAAA,EAAaC,OAAD,IAA0B;IACxDP,UAAU,CAACI,OAAX,GAAqB,EACnB,GAAGJ,UAAU,CAACI,OADK;MAEnB,GAAGG;IAFgB,CAArB;IAIAL,oBAAoB;EACrB,CANmB,EAMjB,EANiB,CAApB;;EAOA,MAAMM,SAAS,GAAG,CAACC,IAAD,EAAgBjB,KAAhB,KAAuC;IACvD;;IAEAkB,MAAM,CAACC,IAAP,CAAYzB,QAAQ,CAACiB,KAArB,EAA4BS,OAA5B,CAAqCC,GAAD;MAAA;;MAAA,8BAClC3B,QAAQ,CAACiB,KAAT,CAAeU,GAAf,CADkC,iFAClC,oBAAsBJ,IAAtB,CADkC,0DAClC,gDAA8BjB,KAA9B,CADkC;IAAA,CAApC;EAGD,CAND;;EAQA,OAAO;IAAEa,WAAF;IAAeG;EAAf,CAAP;AACD"}